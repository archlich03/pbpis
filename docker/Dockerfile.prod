FROM php:8.4-fpm

# Install system dependencies and PHP extensions
RUN apt-get update && apt-get install -y \
    libpng-dev libjpeg-dev libfreetype6-dev \
    libonig-dev libicu-dev libzip-dev \
    supervisor nginx \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo pdo_mysql gd bcmath exif intl zip opcache \
    && rm -rf /var/lib/apt/lists/*

# Configure opcache for production
RUN echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.memory_consumption=256" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.max_accelerated_files=20000" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.validate_timestamps=0" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.revalidate_freq=0" >> /usr/local/etc/php/conf.d/opcache.ini

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Install Node.js for asset building
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /var/www

# Copy dependency files first for better layer caching
COPY composer.json composer.lock ./
RUN composer install --no-dev --no-scripts --no-autoloader --prefer-dist

COPY package.json package-lock.json ./
RUN npm ci --production=false

# Copy application code
COPY . .

# Build assets during image build
RUN npm run build

# Remove node_modules and reinstall only production dependencies
RUN rm -rf node_modules && npm ci --production

# Generate optimized autoloader
RUN composer dump-autoload --optimize --classmap-authoritative

# Set proper permissions
RUN chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache && \
    chmod -R 755 /var/www/storage /var/www/bootstrap/cache

# Copy nginx config
RUN rm /etc/nginx/sites-enabled/default
COPY ./docker/nginx.prod.conf /etc/nginx/sites-available/default
RUN ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# Copy supervisor config
COPY ./docker/supervisord.prod.conf /etc/supervisor/conf.d/supervisord.conf

# Copy production entrypoint
COPY ./docker/entrypoint.prod.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Create log directories
RUN mkdir -p /var/log/supervisor /var/log/nginx

# Expose port for external nginx to proxy to
EXPOSE 80

ENTRYPOINT ["/entrypoint.sh"]
