name: Production Build & Test

on:
  workflow_run:
    workflows: ["PBPIS Deployment Test"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Only run if the dev workflow succeeded
  check-dev-workflow:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
    - name: Check if we should run
      id: check
      run: |
        echo "should-run=true" >> $GITHUB_OUTPUT
        echo "✅ Dev workflow passed or manual trigger - proceeding with production test"

  test-production-build:
    runs-on: ubuntu-latest
    needs: check-dev-workflow
    if: needs.check-dev-workflow.outputs.should-run == 'true'
    name: Test Production Environment
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create production .env file
      run: |
        echo "=== Creating production .env ==="
        cp .env.production.example .env
        
        # Generate test APP_KEY
        echo "Generating APP_KEY..."
        APP_KEY=$(openssl rand -base64 32)
        sed -i "s|APP_KEY=.*|APP_KEY=base64:${APP_KEY}|" .env
        
        # Set test database credentials
        sed -i 's|DB_PASSWORD=.*|DB_PASSWORD=test_db_password|' .env
        sed -i 's|DB_ROOT_PASSWORD=.*|DB_ROOT_PASSWORD=test_root_password|' .env
        
        # Set test Redis password
        REDIS_PASSWORD=$(openssl rand -base64 32)
        sed -i "s|REDIS_PASSWORD=.*|REDIS_PASSWORD=${REDIS_PASSWORD}|" .env
        
        # Set test admin password
        sed -i 's|DEFAULT_PASSWORD=.*|DEFAULT_PASSWORD=test_admin_pass|' .env
        
        # Set test Microsoft OAuth (won't actually work, but needed for config)
        sed -i 's|MSGRAPH_CLIENT_ID=.*|MSGRAPH_CLIENT_ID=test-client-id|' .env
        sed -i 's|MSGRAPH_SECRET_ID=.*|MSGRAPH_SECRET_ID=test-client-secret|' .env
        
        echo "✅ Production .env created"

    - name: Build production Docker image
      run: |
        echo "=== Building production image ==="
        docker compose -f docker-compose.prod.yml build --no-cache
        echo "✅ Production image built successfully"

    - name: Start production services
      run: |
        echo "=== Starting production services ==="
        docker compose -f docker-compose.prod.yml up -d
        echo "✅ Services started"

    - name: Wait for services to be healthy
      run: |
        echo "=== Waiting for services to be healthy ==="
        
        # Wait up to 60 seconds for all services to be healthy
        for i in {1..12}; do
          echo "Attempt $i/12: Checking service health..."
          
          # Check if all services are healthy
          if docker compose -f docker-compose.prod.yml ps | grep -q "unhealthy"; then
            echo "Some services are unhealthy, waiting..."
            sleep 5
            continue
          fi
          
          # Check if Redis is healthy
          if docker compose -f docker-compose.prod.yml ps redis | grep -q "healthy"; then
            echo "✅ Redis is healthy"
          else
            echo "Redis not healthy yet..."
            sleep 5
            continue
          fi
          
          # Check if MySQL is healthy
          if docker compose -f docker-compose.prod.yml ps mysql | grep -q "healthy"; then
            echo "✅ MySQL is healthy"
          else
            echo "MySQL not healthy yet..."
            sleep 5
            continue
          fi
          
          # Check if app is running
          if docker compose -f docker-compose.prod.yml ps app | grep -q "Up"; then
            echo "✅ App container is running"
            break
          else
            echo "App not running yet..."
            sleep 5
          fi
        done
        
        echo "✅ All services are healthy"

    - name: Verify production optimizations
      run: |
        echo "=== Verifying production optimizations ==="
        
        # Check opcache is enabled
        echo "Checking opcache..."
        docker compose -f docker-compose.prod.yml exec -T app php -i | grep "opcache.enable => On" || {
          echo "❌ Opcache is not enabled"
          exit 1
        }
        echo "✅ Opcache is enabled"
        
        # Check Redis extension is loaded
        echo "Checking Redis extension..."
        docker compose -f docker-compose.prod.yml exec -T app php -m | grep -i redis || {
          echo "❌ Redis extension not loaded"
          exit 1
        }
        echo "✅ Redis extension loaded"
        
        # Check no dev dependencies
        echo "Checking for dev dependencies..."
        if docker compose -f docker-compose.prod.yml exec -T app test -d vendor/phpunit/phpunit; then
          echo "❌ Dev dependencies found in production image"
          exit 1
        fi
        echo "✅ No dev dependencies in production image"
        
        # Check assets are built
        echo "Checking built assets..."
        docker compose -f docker-compose.prod.yml exec -T app test -d public/build || {
          echo "❌ Built assets not found"
          exit 1
        }
        echo "✅ Assets are pre-built"
        
        # Check config is cached
        echo "Checking Laravel caches..."
        docker compose -f docker-compose.prod.yml exec -T app test -f bootstrap/cache/config.php || {
          echo "❌ Config cache not found"
          exit 1
        }
        echo "✅ Config is cached"

    - name: Test application responds
      run: |
        echo "=== Testing application response ==="
        
        # Wait a bit more for app to fully initialize
        sleep 10
        
        # Test if application responds
        for i in {1..10}; do
          echo "Attempt $i/10: Testing application..."
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ SUCCESS: Application responds with 200 OK"
            
            # Get response content to verify it's actually working
            RESPONSE=$(curl -s http://localhost:8000/)
            if echo "$RESPONSE" | grep -q "html"; then
              echo "✅ Application is serving HTML content"
            else
              echo "⚠️  Response doesn't look like HTML"
              echo "First 200 chars: ${RESPONSE:0:200}"
            fi
            
            exit 0
          elif [ "$HTTP_CODE" = "500" ]; then
            echo "❌ Application returned 500 error"
            echo "Checking logs..."
            docker compose -f docker-compose.prod.yml logs app | tail -50
            exit 1
          else
            echo "Got HTTP $HTTP_CODE, waiting..."
            sleep 5
          fi
        done
        
        echo "❌ Application did not respond successfully"
        exit 1

    - name: Test Redis connectivity
      run: |
        echo "=== Testing Redis connectivity ==="
        
        # Test Redis connection from app
        docker compose -f docker-compose.prod.yml exec -T app php artisan tinker --execute="
        try {
          Cache::put('test_key', 'test_value', 60);
          \$value = Cache::get('test_key');
          if (\$value === 'test_value') {
            echo '✅ Redis cache working' . PHP_EOL;
          } else {
            echo '❌ Redis cache not working' . PHP_EOL;
            exit(1);
          }
          Cache::forget('test_key');
        } catch (Exception \$e) {
          echo '❌ Redis error: ' . \$e->getMessage() . PHP_EOL;
          exit(1);
        }
        "

    - name: Test database connectivity
      run: |
        echo "=== Testing database connectivity ==="
        
        # Test database connection
        docker compose -f docker-compose.prod.yml exec -T app php artisan tinker --execute="
        try {
          \$result = DB::select('SELECT 1 as test');
          if (\$result[0]->test === 1) {
            echo '✅ Database connection working' . PHP_EOL;
          } else {
            echo '❌ Database query failed' . PHP_EOL;
            exit(1);
          }
        } catch (Exception \$e) {
          echo '❌ Database error: ' . \$e->getMessage() . PHP_EOL;
          exit(1);
        }
        "

    - name: Test supervisor processes
      run: |
        echo "=== Testing supervisor processes ==="
        
        # Check supervisor status
        docker compose -f docker-compose.prod.yml exec -T app supervisorctl status
        
        # Verify all processes are running
        SUPERVISOR_STATUS=$(docker compose -f docker-compose.prod.yml exec -T app supervisorctl status)
        
        if echo "$SUPERVISOR_STATUS" | grep -q "RUNNING.*php-fpm"; then
          echo "✅ PHP-FPM is running"
        else
          echo "❌ PHP-FPM is not running"
          exit 1
        fi
        
        if echo "$SUPERVISOR_STATUS" | grep -q "RUNNING.*nginx"; then
          echo "✅ Nginx is running"
        else
          echo "❌ Nginx is not running"
          exit 1
        fi
        
        if echo "$SUPERVISOR_STATUS" | grep -q "RUNNING.*queue-worker\|FATAL.*queue-worker"; then
          echo "✅ Queue worker process exists (may be FATAL if no jobs, which is expected)"
        else
          echo "⚠️  Queue worker status unclear"
        fi

    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Container Status ==="
        docker compose -f docker-compose.prod.yml ps
        
        echo ""
        echo "=== App Container Logs ==="
        docker compose -f docker-compose.prod.yml logs app | tail -100
        
        echo ""
        echo "=== Laravel Error Logs ==="
        docker compose -f docker-compose.prod.yml exec -T app tail -100 /var/www/storage/logs/laravel.log || echo "Could not read Laravel logs"
        
        echo ""
        echo "=== MySQL Logs ==="
        docker compose -f docker-compose.prod.yml logs mysql | tail -50
        
        echo ""
        echo "=== Redis Logs ==="
        docker compose -f docker-compose.prod.yml logs redis | tail -50

    - name: Cleanup
      if: always()
      run: |
        echo "=== Cleanup ==="
        docker compose -f docker-compose.prod.yml down -v
        docker system prune -f
        echo "✅ Cleanup complete"

    - name: Generate test summary
      if: success()
      run: |
        echo "=== Production Build Test Summary ==="
        echo "✅ Production Docker image built successfully"
        echo "✅ All services started and healthy"
        echo "✅ Production optimizations verified:"
        echo "   - Opcache enabled"
        echo "   - Redis extension loaded"
        echo "   - No dev dependencies"
        echo "   - Assets pre-built"
        echo "   - Config cached"
        echo "✅ Application responds with 200 OK"
        echo "✅ Redis connectivity working"
        echo "✅ Database connectivity working"
        echo "✅ Supervisor processes running"
        echo ""
        echo "🎯 Production environment is ready for deployment!"
